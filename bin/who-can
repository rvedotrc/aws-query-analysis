#!/usr/bin/env ruby

# Usage: who-can path/to/account-authorization-details.json ACTION RESOURCE
# Where ACTION is e.g. "s3:DeleteObject" or "iam:CreateUser", ...
# and RESOURCE is e.g. arn:aws:s3:::my-bucket/file.txt (etc)

# Shows a list of IAM users and roles who have permission to perform the
# given action on the given resource.

# (Approximately.  Not guaranteed to be accurate; patches welcome!)
# In particular: does not take into consideration any policy on the resource
# itself, e.g. S3 bucket policy.

require 'json'

iam_data_file, @action, @resource = ARGV

data = JSON.parse(IO.read iam_data_file)

# We seek to emulate the AWS policy engine, where:
# - the Principal is each user & role in the above data
# - the Action and Resource are as specified in on the command line

require_relative "../lib/aws_policy_simulator"

def run_documents(documents, principal)

  ctx = AwsPolicySimulator::RequestContext.new(principal, @action, @resource)
  docs = documents.map {|d| AwsPolicySimulator::PolicyDocument.new(d)}
  docset = AwsPolicySimulator::PolicyDocumentSet.new(docs)
  docset.test(ctx)

end

def policy_documents_for_thing(data, thing, thing_type)
  # Inline
  documents = thing["#{thing_type}PolicyList"].map {|p| p["PolicyDocument"] }

  # Managed
  thing["AttachedManagedPolicies"].each do |att|
    policy = data["Policies"].find {|p| p["Arn"] == att["PolicyArn"]}
    policy or raise "Couldn't find policy #{att.inspect}"
    documents << policy["PolicyVersionList"].find {|pv| pv["IsDefaultVersion"]}["Document"]
  end

  # Group memberships (should only apply to users)
  if thing["GroupList"]
    thing["GroupList"].each do |group_name|
      group = data["GroupDetailList"].find {|g| g["GroupName"] == group_name}
      group or raise "Couldn't find group #{group_name.inspect}"
      documents.concat policy_documents_for_thing(data, group, "Group")
    end
  end

  documents
end

no_humans = true

user_names = []
data["UserDetailList"].each do |u|
  next if no_humans and u["UserName"].start_with? "modav."

  documents = policy_documents_for_thing(data, u, "User")
  ans = run_documents(documents, { "AWS" => u["Arn"] })
  if ans.allowed?
    user_names << u["UserName"]
  end
end

role_names = []
data["RoleDetailList"].each do |r|
  next if no_humans and r["Path"].start_with? "/x509/"

  documents = policy_documents_for_thing(data, r, "Role")
  ans = run_documents(documents, { "AWS" => r["Arn"] })
  if ans.allowed?
    role_names << r["RoleName"]
  end
end

puts JSON.pretty_generate({
  Users: user_names,
  Roles: role_names,
})
