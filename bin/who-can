#!/usr/bin/env ruby

# Usage: who-can path/to/account-authorization-details.json ACTION RESOURCE
# Where ACTION is e.g. "s3:DeleteObject" or "iam:CreateUser", ...
# and RESOURCE is e.g. arn:aws:s3:::my-bucket/file.txt (etc)

# Shows a list of IAM users and roles who have permission to perform the
# given action on the given resource.

# (Approximately.  Not guaranteed to be accurate; patches welcome!)
# In particular: does not take into consideration any policy on the resource
# itself, e.g. S3 bucket policy.

require 'json'

iam_data_file, @action, @resource = ARGV

# We seek to emulate the AWS policy engine, where:
# - the Principal is each user & role in the above data
# - the Action and Resource are as specified in on the command line

require_relative "../lib/aws_policy_simulator"
require_relative "../lib/account_authorization_details"

report = AccountAuthorizationDetails::Report.new(iam_data_file)

def run_documents(documents, principal)

  ctx = AwsPolicySimulator::RequestContext.new(principal, @action, @resource)
  docs = documents.map {|d| AwsPolicySimulator::PolicyDocument.new(d)}
  docset = AwsPolicySimulator::PolicyDocumentSet.new(docs)
  docset.test(ctx)

end

def policy_documents_for_thing(thing)
  # Inline
  documents = thing.inline_policies.map(&:policy_document)

  # Managed
  documents.concat thing.managed_policies.map(&:policy_document)

  # Group memberships (should only apply to users)
  if thing.respond_to? :groups
    documents.concat thing.groups.map {|g| policy_documents_for_thing(g)}.flatten
  end

  documents
end

users = report.users.select do |u|
  documents = u.all_policy_documents
  ans = run_documents(documents, { "AWS" => u.data["Arn"] })
  ans.allowed?
end

roles = report.roles.select do |r|
  documents = r.all_policy_documents
  ans = run_documents(documents, { "AWS" => r.data["Arn"] })
  ans.allowed?
end

users = users.map {|u| { "Path" => u.data["Path"], "UserName" => u.data["UserName"] }}
roles = roles.map {|r| { "Path" => r.data["Path"], "RoleName" => r.data["RoleName"] }}

def print_compact_list(list, separator, before_first, after_last)
  return if list.empty?
  print before_first
  print list.map {|d| JSON.generate(d)}.join separator
  print after_last
end

# Not quite pretty-printed.  One user/role one each line.
print "{\n  \"Users\": ["
print_compact_list(users, ",\n    ", "\n    ", "\n  ")
print "],\n  \"Roles\": ["
print_compact_list(roles, ",\n    ", "\n    ", "\n  ")
print "]\n}\n"

# eof who-can
